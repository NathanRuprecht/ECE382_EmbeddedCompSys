# ECE 382 - Embedded Systems i - Fall 2014
#
# Lab2 - Subroutines - Cryptography
#
# Author: C2C Nathan Ruprecht
#
# Pseudocode2 - Minimum requirements
#


def main():
    #ROM
    encrypted_message = 0xef, 0xc3,0xc2,0xcb,0xde,0xcd,0xd8,0xd9,0xc0,0xcd,0xd8,0xc5,0xc3,0xc2,0xdf,0x8d,0x8c,0x8c,0xf5,0xc3,0xd9,0x8c,0xc8,0xc9,0xcf,0xde,0xd5,0xdc,0xd8,0xc9,0xc8,0x8c,0xd8,0xc4,0xc9,0x8c,0xe9,0xef,0xe9,0x9f,0x94,0x9e,0x8c,0xc4,0xc5,0xc8,0xc8,0xc9,0xc2,0x8c,0xc1,0xc9,0xdf,0xdf,0xcd,0xcb,0xc9,0x8c,0xcd,0xc2,0xc8,0x8c,0xcd,0xcf,0xc4,0xc5,0xc9,0xda,0xc9,0xc8,0x8c,0xde,0xc9,0xdd,0xd9,0xc5,0xde,0xc9,0xc8,0x8c,0xca,0xd9,0xc2,0xcf,0xd8,0xc5,0xc3,0xc2,0xcd,0xc0,0xc5,0xd8,0xd5,0x8f
    key = 0xac
    length_message = len(encrypted_message)
    
    #initializing registers
    R5 = encrypted_message
    R6 = key
    R7 = length_message

    #calling subroutine to decrypt
    message = decrypt_message(R5, R6, R7)
    print(message)


def decrypt_message(R5, R6, R7):

    #initiate array to store message
    R12 =[]
    
    #make array list as long as the message
    for i in range(R7):
        R12.append(1)

    #decrypt message by decrypting each byte    
    for i in range(R7):
        R12[i] = decrypt_character(R5[i], R6)

    #return the decrypted message
    return R12
     
def decrypt_character(R5, R6):

    #xor message and key
    byte = hex(R5 ^ R6)
    return byte


if __name__ == "__main__":
    main()
